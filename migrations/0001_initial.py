# Generated by Django 4.2.7 on 2024-01-01 00:00:00

from django.db import migrations, models
import django.db.models.deletion
import django.contrib.gis.db.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        # Create custom user model
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=15)),
                ('role', models.CharField(choices=[('CITIZEN', 'Citizen'), ('RESPONDER', 'Responder'), ('COMMAND', 'Command Center'), ('ADMIN', 'Administrator')], default='CITIZEN', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('home_address', models.TextField(blank=True, null=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'app_user',
            },
        ),
        
        # Create user profile model
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_type', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('medical_conditions', models.TextField(blank=True, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('medications', models.TextField(blank=True, null=True)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='users.user')),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
        
        # Create area model
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('boundary', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('center', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'area',
                'ordering': ['name'],
            },
        ),
        
        # Create incident model
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('incident_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('FIRE', 'Fire'), ('FLOOD', 'Flood'), ('ACCIDENT', 'Accident'), ('VIOLENCE', 'Violence'), ('MEDICAL', 'Medical Emergency'), ('NATURAL', 'Natural Disaster'), ('OTHER', 'Other')], max_length=20)),
                ('severity', models.IntegerField(help_text='Severity level 1-5 (1=Low, 5=Critical)')),
                ('status', models.CharField(choices=[('NEW', 'New'), ('TRIAGED', 'Triaged'), ('DISPATCHED', 'Dispatched'), ('ONGOING', 'Ongoing'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed')], default='NEW', max_length=20)),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('lon', models.DecimalField(decimal_places=6, max_digits=9)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('address', models.TextField(blank=True, null=True)),
                ('summary', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('triaged_at', models.DateTimeField(blank=True, null=True)),
                ('dispatched_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('priority_score', models.FloatField(default=0.0)),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='incidents', to='incidents.area')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reported_incidents', to='users.user')),
            ],
            options={
                'db_table': 'incident',
                'ordering': ['-created_at'],
            },
        ),
        
        # Create incident status history model
        migrations.CreateModel(
            name='IncidentStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_status', models.CharField(blank=True, choices=[('NEW', 'New'), ('TRIAGED', 'Triaged'), ('DISPATCHED', 'Dispatched'), ('ONGOING', 'Ongoing'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed')], max_length=20, null=True)),
                ('new_status', models.CharField(choices=[('NEW', 'New'), ('TRIAGED', 'Triaged'), ('DISPATCHED', 'Dispatched'), ('ONGOING', 'Ongoing'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed')], max_length=20)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='status_changes', to='users.user')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='incidents.incident')),
            ],
            options={
                'db_table': 'incident_status_history',
                'ordering': ['-changed_at'],
            },
        ),
        
        # Create incident media model
        migrations.CreateModel(
            name='IncidentMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('IMAGE', 'Image'), ('VIDEO', 'Video'), ('AUDIO', 'Audio'), ('DOCUMENT', 'Document')], max_length=20)),
                ('file', models.FileField(upload_to='incident_media/')),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='incidents.incident')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.user')),
            ],
            options={
                'db_table': 'incident_media',
                'ordering': ['-uploaded_at'],
            },
        ),
        
        # Create incident note model
        migrations.CreateModel(
            name='IncidentNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_internal', models.BooleanField(default=False, help_text='Internal note not visible to citizens')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.user')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='incidents.incident')),
            ],
            options={
                'db_table': 'incident_note',
                'ordering': ['-created_at'],
            },
        ),
        
        # Create responder unit model
        migrations.CreateModel(
            name='ResponderUnit',
            fields=[
                ('unit_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('unit_type', models.CharField(choices=[('AMBULANCE', 'Ambulance'), ('FIRE_TRUCK', 'Fire Truck'), ('POLICE', 'Police Vehicle'), ('RESCUE', 'Rescue Vehicle'), ('NGO_TEAM', 'NGO Team'), ('VOLUNTEER', 'Volunteer Team'), ('OTHER', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('DISPATCHED', 'Dispatched'), ('ON_SCENE', 'On Scene'), ('RETURNING', 'Returning to Base'), ('MAINTENANCE', 'Under Maintenance'), ('OFFLINE', 'Offline')], default='AVAILABLE', max_length=20)),
                ('home_area', models.CharField(max_length=255)),
                ('current_lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('current_lon', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('current_location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('capacity', models.IntegerField(default=1)),
                ('current_occupancy', models.IntegerField(default=0)),
                ('capabilities', models.JSONField(blank=True, default=list)),
                ('equipment', models.JSONField(blank=True, default=list)),
                ('contact_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('radio_channel', models.CharField(blank=True, max_length=20, null=True)),
                ('base_station', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_status_update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'responder_unit',
                'ordering': ['name'],
            },
        ),
        
        # Create responder assignment model
        migrations.CreateModel(
            name='ResponderAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, max_length=50, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_until', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('responder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_assignments', to='users.user')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responder_assignments', to='responders.responderunit')),
            ],
            options={
                'db_table': 'responder_assignment',
                'unique_together': {('responder', 'unit', 'is_active')},
            },
        ),
        
        # Create dispatch model
        migrations.CreateModel(
            name='Dispatch',
            fields=[
                ('dispatch_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ASSIGNED', 'Assigned'), ('ACKNOWLEDGED', 'Acknowledged'), ('EN_ROUTE', 'En Route'), ('ON_SCENE', 'On Scene'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('en_route_at', models.DateTimeField(blank=True, null=True)),
                ('arrived_at', models.DateTimeField(blank=True, null=True)),
                ('cleared_at', models.DateTimeField(blank=True, null=True)),
                ('outcome', models.CharField(blank=True, choices=[('SUCCESS', 'Success'), ('PARTIAL', 'Partial Success'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('OTHER', 'Other')], max_length=20, null=True)),
                ('outcome_notes', models.TextField(blank=True, null=True)),
                ('response_time', models.DurationField(blank=True, null=True)),
                ('on_scene_time', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispatches', to='incidents.incident')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispatches', to='responders.responderunit')),
            ],
            options={
                'db_table': 'dispatch',
                'ordering': ['-assigned_at'],
            },
        ),
        
        # Create situation report model
        migrations.CreateModel(
            name='SituationReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('assessment', models.TextField(blank=True, null=True)),
                ('casualties', models.IntegerField(default=0)),
                ('fatalities', models.IntegerField(default=0)),
                ('resources_needed', models.JSONField(blank=True, default=list)),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('lon', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dispatch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='situation_reports', to='responders.dispatch')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='situation_reports', to='users.user')),
            ],
            options={
                'db_table': 'situation_report',
                'ordering': ['-created_at'],
            },
        ),
        
        # Create shelter model
        migrations.CreateModel(
            name='Shelter',
            fields=[
                ('shelter_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('shelter_type', models.CharField(choices=[('EMERGENCY', 'Emergency Shelter'), ('TEMPORARY', 'Temporary Shelter'), ('PERMANENT', 'Permanent Shelter'), ('MEDICAL', 'Medical Shelter'), ('CHILDREN', "Children's Shelter"), ('ANIMAL', 'Animal Shelter')], max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('STANDBY', 'Standby'), ('FULL', 'At Capacity'), ('CLOSED', 'Closed'), ('MAINTENANCE', 'Under Maintenance')], default='STANDBY', max_length=20)),
                ('address', models.TextField()),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('lon', models.DecimalField(decimal_places=6, max_digits=9)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('capacity', models.IntegerField()),
                ('current_occupancy', models.IntegerField(default=0)),
                ('max_occupancy', models.IntegerField()),
                ('facilities', models.JSONField(blank=True, default=list)),
                ('services', models.JSONField(blank=True, default=list)),
                ('accessibility', models.JSONField(blank=True, default=list)),
                ('contact_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('manager_name', models.CharField(blank=True, max_length=255, null=True)),
                ('manager_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('open_24_7', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='shelters', to='incidents.area')),
            ],
            options={
                'db_table': 'shelter',
                'ordering': ['name'],
            },
        ),
        
        # Create item model
        migrations.CreateModel(
            name='Item',
            fields=[
                ('item_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)),
                ('sku', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('FOOD', 'Food & Water'), ('MEDICAL', 'Medical Supplies'), ('HYGIENE', 'Hygiene Items'), ('CLOTHING', 'Clothing & Bedding'), ('TOOLS', 'Tools & Equipment'), ('ELECTRONICS', 'Electronics'), ('OTHER', 'Other')], max_length=20)),
                ('unit', models.CharField(choices=[('PIECE', 'Piece'), ('BOX', 'Box'), ('PACK', 'Pack'), ('BOTTLE', 'Bottle'), ('CAN', 'Can'), ('BAG', 'Bag'), ('METER', 'Meter'), ('LITER', 'Liter'), ('KILOGRAM', 'Kilogram')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('specifications', models.JSONField(blank=True, default=dict)),
                ('brand', models.CharField(blank=True, max_length=100, null=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('storage_conditions', models.CharField(blank=True, max_length=100, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('min_stock_level', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'item',
                'ordering': ['category', 'name'],
            },
        ),
        
        # Create shelter stock model
        migrations.CreateModel(
            name='ShelterStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0)),
                ('reserved_quantity', models.IntegerField(default=0)),
                ('storage_location', models.CharField(blank=True, max_length=100, null=True)),
                ('storage_notes', models.TextField(blank=True, null=True)),
                ('last_restocked', models.DateTimeField(blank=True, null=True)),
                ('last_audit', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shelter_stocks', to='logistics.item')),
                ('shelter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='logistics.shelter')),
            ],
            options={
                'db_table': 'shelter_stock',
                'unique_together': {('shelter', 'item')},
            },
        ),
        
        # Create stock transaction model
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('transaction_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)),
                ('transaction_type', models.CharField(choices=[('IN', 'Stock In'), ('OUT', 'Stock Out'), ('ADJUST', 'Stock Adjustment'), ('RESERVE', 'Reserve Stock'), ('RELEASE', 'Release Reserved Stock'), ('TRANSFER', 'Transfer Between Shelters'), ('AUDIT', 'Stock Audit')], max_length=20)),
                ('reason', models.CharField(choices=[('RESTOCK', 'Restocking'), ('DISTRIBUTION', 'Distribution to Beneficiaries'), ('DAMAGED', 'Damaged/Expired'), ('THEFT', 'Theft/Loss'), ('AUDIT', 'Audit Correction'), ('TRANSFER', 'Transfer'), ('OTHER', 'Other')], max_length=20)),
                ('quantity', models.IntegerField()),
                ('reference_number', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('performed_by', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('shelter_stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='logistics.shelterstock')),
            ],
            options={
                'db_table': 'stock_transaction',
                'ordering': ['-created_at'],
            },
        ),
        
        # Create shelter occupancy model
        migrations.CreateModel(
            name='ShelterOccupancy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occupancy_count', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('shelter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='occupancy_records', to='logistics.shelter')),
            ],
            options={
                'db_table': 'shelter_occupancy',
                'ordering': ['-timestamp'],
            },
        ),
        
        # Create analytics dimension and fact tables
        migrations.CreateModel(
            name='DimDate',
            fields=[
                ('date_key', models.DateField(primary_key=True, serialize=False)),
                ('year', models.IntegerField()),
                ('quarter', models.IntegerField()),
                ('month', models.IntegerField()),
                ('month_name', models.CharField(max_length=20)),
                ('week_of_year', models.IntegerField()),
                ('day_of_year', models.IntegerField()),
                ('day_of_month', models.IntegerField()),
                ('day_of_week', models.IntegerField()),
                ('day_name', models.CharField(max_length=20)),
                ('is_weekend', models.BooleanField()),
                ('is_holiday', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'dim_date',
            },
        ),
        
        migrations.CreateModel(
            name='DimRegion',
            fields=[
                ('region_key', models.AutoField(primary_key=True, serialize=False)),
                ('area_code', models.CharField(max_length=10, unique=True)),
                ('area_name', models.CharField(max_length=255)),
                ('region_type', models.CharField(blank=True, max_length=50, null=True)),
                ('population', models.IntegerField(blank=True, null=True)),
                ('area_sq_km', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('center_lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('center_lon', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('center_location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'dim_region',
            },
        ),
        
        migrations.CreateModel(
            name='DimIncident',
            fields=[
                ('incident_key', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)),
                ('incident_id', models.CharField(max_length=50, unique=True)),
                ('category', models.CharField(max_length=20)),
                ('severity', models.IntegerField()),
                ('status', models.CharField(max_length=20)),
                ('priority_score', models.FloatField()),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('lon', models.DecimalField(decimal_places=6, max_digits=9)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('reporter_role', models.CharField(max_length=20)),
                ('reporter_area', models.CharField(max_length=10)),
                ('created_date_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incidents_created', to='analytics.dimdate')),
                ('resolved_date_key', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incidents_resolved', to='analytics.dimdate')),
            ],
            options={
                'db_table': 'dim_incident',
            },
        ),
        
        migrations.CreateModel(
            name='DimUnit',
            fields=[
                ('unit_key', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)),
                ('unit_id', models.CharField(max_length=50, unique=True)),
                ('unit_name', models.CharField(max_length=255)),
                ('unit_type', models.CharField(max_length=20)),
                ('home_area', models.CharField(max_length=255)),
                ('capacity', models.IntegerField()),
            ],
            options={
                'db_table': 'dim_unit',
            },
        ),
        
        migrations.CreateModel(
            name='FactIncidentDaily',
            fields=[
                ('fact_key', models.AutoField(primary_key=True, serialize=False)),
                ('total_incidents', models.IntegerField(default=0)),
                ('new_incidents', models.IntegerField(default=0)),
                ('resolved_incidents', models.IntegerField(default=0)),
                ('closed_incidents', models.IntegerField(default=0)),
                ('avg_severity', models.FloatField(default=0.0)),
                ('max_severity', models.IntegerField(default=0)),
                ('min_severity', models.IntegerField(default=0)),
                ('fire_incidents', models.IntegerField(default=0)),
                ('flood_incidents', models.IntegerField(default=0)),
                ('accident_incidents', models.IntegerField(default=0)),
                ('violence_incidents', models.IntegerField(default=0)),
                ('medical_incidents', models.IntegerField(default=0)),
                ('natural_incidents', models.IntegerField(default=0)),
                ('other_incidents', models.IntegerField(default=0)),
                ('avg_response_time_minutes', models.FloatField(default=0.0)),
                ('total_response_time_minutes', models.FloatField(default=0.0)),
                ('date_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_incidents', to='analytics.dimdate')),
                ('region_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_incidents', to='analytics.dimregion')),
            ],
            options={
                'db_table': 'fact_incident_daily',
                'unique_together': {('date_key', 'region_key')},
            },
        ),
        
        migrations.CreateModel(
            name='FactResponse',
            fields=[
                ('fact_key', models.AutoField(primary_key=True, serialize=False)),
                ('dispatch_time_minutes', models.FloatField(blank=True, null=True)),
                ('response_time_minutes', models.FloatField(blank=True, null=True)),
                ('on_scene_time_minutes', models.FloatField(blank=True, null=True)),
                ('total_response_time_minutes', models.FloatField(blank=True, null=True)),
                ('outcome', models.CharField(blank=True, max_length=20, null=True)),
                ('casualties', models.IntegerField(default=0)),
                ('fatalities', models.IntegerField(default=0)),
                ('unit_distance_km', models.FloatField(blank=True, null=True)),
                ('unit_utilization_hours', models.FloatField(default=0.0)),
                ('date_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_facts', to='analytics.dimdate')),
                ('incident_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_facts', to='analytics.dimincident')),
                ('unit_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_facts', to='analytics.dimunit')),
                ('region_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_facts', to='analytics.dimregion')),
            ],
            options={
                'db_table': 'fact_response',
            },
        ),
        
        migrations.CreateModel(
            name='FactShelterUtilization',
            fields=[
                ('fact_key', models.AutoField(primary_key=True, serialize=False)),
                ('total_shelters', models.IntegerField(default=0)),
                ('active_shelters', models.IntegerField(default=0)),
                ('total_capacity', models.IntegerField(default=0)),
                ('total_occupancy', models.IntegerField(default=0)),
                ('avg_occupancy_rate', models.FloatField(default=0.0)),
                ('emergency_shelters', models.IntegerField(default=0)),
                ('temporary_shelters', models.IntegerField(default=0)),
                ('medical_shelters', models.IntegerField(default=0)),
                ('date_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shelter_facts', to='analytics.dimdate')),
                ('region_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shelter_facts', to='analytics.dimregion')),
            ],
            options={
                'db_table': 'fact_shelter_utilization',
                'unique_together': {('date_key', 'region_key')},
            },
        ),
        
        migrations.CreateModel(
            name='FactInventory',
            fields=[
                ('fact_key', models.AutoField(primary_key=True, serialize=False)),
                ('total_items', models.IntegerField(default=0)),
                ('low_stock_items', models.IntegerField(default=0)),
                ('out_of_stock_items', models.IntegerField(default=0)),
                ('food_water_items', models.IntegerField(default=0)),
                ('medical_items', models.IntegerField(default=0)),
                ('hygiene_items', models.IntegerField(default=0)),
                ('clothing_items', models.IntegerField(default=0)),
                ('tool_items', models.IntegerField(default=0)),
                ('items_distributed', models.IntegerField(default=0)),
                ('items_restocked', models.IntegerField(default=0)),
                ('items_expired', models.IntegerField(default=0)),
                ('date_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_facts', to='analytics.dimdate')),
                ('region_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_facts', to='analytics.dimregion')),
            ],
            options={
                'db_table': 'fact_inventory',
                'unique_together': {('date_key', 'region_key')},
            },
        ),
        
        # Add indexes
        migrations.AddIndex(
            model_name='incident',
            index=models.Index(fields=['status', 'severity', 'created_at'], name='incident_status_severity_created_idx'),
        ),
        migrations.AddIndex(
            model_name='incident',
            index=models.Index(fields=['category', 'area'], name='incident_category_area_idx'),
        ),
        migrations.AddIndex(
            model_name='incident',
            index=models.Index(fields=['reported_by', 'created_at'], name='incident_reported_by_created_idx'),
        ),
        migrations.AddIndex(
            model_name='incidentstatushistory',
            index=models.Index(fields=['incident', 'changed_at'], name='incident_status_history_incident_changed_idx'),
        ),
        migrations.AddIndex(
            model_name='incidentstatushistory',
            index=models.Index(fields=['new_status', 'changed_at'], name='incident_status_history_new_status_changed_idx'),
        ),
        migrations.AddIndex(
            model_name='responderunit',
            index=models.Index(fields=['unit_type', 'status'], name='responder_unit_unit_type_status_idx'),
        ),
        migrations.AddIndex(
            model_name='responderunit',
            index=models.Index(fields=['home_area', 'status'], name='responder_unit_home_area_status_idx'),
        ),
        migrations.AddIndex(
            model_name='responderunit',
            index=models.Index(fields=['status', 'last_status_update'], name='responder_unit_status_last_update_idx'),
        ),
        migrations.AddIndex(
            model_name='dispatch',
            index=models.Index(fields=['status', 'assigned_at'], name='dispatch_status_assigned_idx'),
        ),
        migrations.AddIndex(
            model_name='dispatch',
            index=models.Index(fields=['incident', 'status'], name='dispatch_incident_status_idx'),
        ),
        migrations.AddIndex(
            model_name='dispatch',
            index=models.Index(fields=['unit', 'status'], name='dispatch_unit_status_idx'),
        ),
        migrations.AddIndex(
            model_name='shelter',
            index=models.Index(fields=['shelter_type', 'status'], name='shelter_shelter_type_status_idx'),
        ),
        migrations.AddIndex(
            model_name='shelter',
            index=models.Index(fields=['area', 'status'], name='shelter_area_status_idx'),
        ),
        migrations.AddIndex(
            model_name='shelter',
            index=models.Index(fields=['status', 'current_occupancy'], name='shelter_status_current_occupancy_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['category', 'sku'], name='item_category_sku_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['name', 'brand'], name='item_name_brand_idx'),
        ),
        migrations.AddIndex(
            model_name='shelterstock',
            index=models.Index(fields=['shelter', 'item'], name='shelter_stock_shelter_item_idx'),
        ),
        migrations.AddIndex(
            model_name='shelterstock',
            index=models.Index(fields=['item', 'quantity'], name='shelter_stock_item_quantity_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['shelter_stock', 'created_at'], name='stock_transaction_shelter_stock_created_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['transaction_type', 'created_at'], name='stock_transaction_transaction_type_created_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['reason', 'created_at'], name='stock_transaction_reason_created_idx'),
        ),
        migrations.AddIndex(
            model_name='shelteroccupancy',
            index=models.Index(fields=['shelter', 'timestamp'], name='shelter_occupancy_shelter_timestamp_idx'),
        ),
        migrations.AddIndex(
            model_name='shelteroccupancy',
            index=models.Index(fields=['timestamp'], name='shelter_occupancy_timestamp_idx'),
        ),
        migrations.AddIndex(
            model_name='dimdate',
            index=models.Index(fields=['year', 'month'], name='dim_date_year_month_idx'),
        ),
        migrations.AddIndex(
            model_name='dimdate',
            index=models.Index(fields=['year', 'quarter'], name='dim_date_year_quarter_idx'),
        ),
        migrations.AddIndex(
            model_name='dimdate',
            index=models.Index(fields=['month', 'day_of_month'], name='dim_date_month_day_idx'),
        ),
        migrations.AddIndex(
            model_name='dimregion',
            index=models.Index(fields=['area_code'], name='dim_region_area_code_idx'),
        ),
        migrations.AddIndex(
            model_name='dimregion',
            index=models.Index(fields=['area_name'], name='dim_region_area_name_idx'),
        ),
        migrations.AddIndex(
            model_name='dimincident',
            index=models.Index(fields=['category', 'severity'], name='dim_incident_category_severity_idx'),
        ),
        migrations.AddIndex(
            model_name='dimincident',
            index=models.Index(fields=['status', 'created_date_key'], name='dim_incident_status_created_date_idx'),
        ),
        migrations.AddIndex(
            model_name='dimincident',
            index=models.Index(fields=['reporter_role', 'created_date_key'], name='dim_incident_reporter_role_created_date_idx'),
        ),
        migrations.AddIndex(
            model_name='dimunit',
            index=models.Index(fields=['unit_type', 'home_area'], name='dim_unit_unit_type_home_area_idx'),
        ),
        migrations.AddIndex(
            model_name='dimunit',
            index=models.Index(fields=['unit_name'], name='dim_unit_unit_name_idx'),
        ),
        migrations.AddIndex(
            model_name='factincidentdaily',
            index=models.Index(fields=['date_key', 'region_key'], name='fact_incident_daily_date_region_idx'),
        ),
        migrations.AddIndex(
            model_name='factincidentdaily',
            index=models.Index(fields=['date_key'], name='fact_incident_daily_date_idx'),
        ),
        migrations.AddIndex(
            model_name='factincidentdaily',
            index=models.Index(fields=['region_key'], name='fact_incident_daily_region_idx'),
        ),
        migrations.AddIndex(
            model_name='factresponse',
            index=models.Index(fields=['date_key', 'region_key'], name='fact_response_date_region_idx'),
        ),
        migrations.AddIndex(
            model_name='factresponse',
            index=models.Index(fields=['incident_key'], name='fact_response_incident_idx'),
        ),
        migrations.AddIndex(
            model_name='factresponse',
            index=models.Index(fields=['unit_key'], name='fact_response_unit_idx'),
        ),
        migrations.AddIndex(
            model_name='factresponse',
            index=models.Index(fields=['outcome', 'date_key'], name='fact_response_outcome_date_idx'),
        ),
        migrations.AddIndex(
            model_name='factshelterutilization',
            index=models.Index(fields=['date_key', 'region_key'], name='fact_shelter_utilization_date_region_idx'),
        ),
        migrations.AddIndex(
            model_name='factshelterutilization',
            index=models.Index(fields=['date_key'], name='fact_shelter_utilization_date_idx'),
        ),
        migrations.AddIndex(
            model_name='factinventory',
            index=models.Index(fields=['date_key', 'region_key'], name='fact_inventory_date_region_idx'),
        ),
        migrations.AddIndex(
            model_name='factinventory',
            index=models.Index(fields=['date_key'], name='fact_inventory_date_idx'),
        ),
    ]
